package main

import (
	"strings"
	"text/template"

	"github.com/seletskiy/tplutil"
)

var viewTpl = template.New("go")

var _ = template.Must(viewTpl.New("package").Parse(strings.TrimLeft(`
// It is autogenerated bindings for Android {{.PackageName}} class.
//
// See documentation about methods on: {{.Url}}
package {{.PackageName}}

import "github.com/seletskiy/go-android-rpc/android"

type {{.TypeName}} struct {{"{"}}{{if eq .TypeName .Base ""}}
	id string{{else}}
	{{.Base}}{{end}}
}{{if eq .TypeName .Base ""}}

func New{{.TypeName}}(id string) interface{} {
	obj := {{.TypeName}}{}
	obj.id = id

	return obj
}

func (obj {{.TypeName}}) GetId() string  {
	return obj.id
}{{else}}

func New{{.TypeName}}(id string) interface{} {
	obj := {{.TypeName}}{New{{.Base}}(id).({{.Base}})}

	return obj
}{{end}}

func (obj {{.TypeName}}) GetClassName() string {
	return "{{.SdkPackageName}}.{{.TypeName}}"
}

`, "\n")))

var _ = template.Must(viewTpl.New("registry").Parse(strings.TrimLeft(`
func init() {
	android.{{.Registry}}["{{.SdkPackageName}}.{{.TypeName}}"] = New{{.TypeName}}
}

`, "\n")))

var _ = template.Must(viewTpl.New("args").Funcs(tplutil.Last).Parse(
	tplutil.Strip(`
	{{range $i, $_ := .Args}}
		{{.Name}} {{.Type}}
		{{if last $i $.Args | not}}, {{end}}
	{{end}}
`)))

var _ = template.Must(viewTpl.New("args_in_call").Funcs(tplutil.Last).Parse(
	tplutil.Strip(`
	{{range $i, $_ := .Args}}
		{{if eq .Type "float64"}}
			android.Float({{.Name}})
		{{else}}
			{{.Name}}
		{{end}}
		{{","}}{{if last $i $.Args | not}} {{end}}
	{{end}}
`)))

var _ = template.Must(viewTpl.New("return").Funcs(tplutil.Last).Parse(
	tplutil.Strip(`
	{{" "}}{{if .ReturnType}}{{.ReturnType}} {{end}}
`)))

var _ = template.Must(viewTpl.New("method").Parse(strings.TrimLeft(`
func (obj {{.TypeName}}) {{.DisplayMethodName}}({{template "args" .}}){{template "return" .}}{
	return android.CallViewMethod(
		obj.GetId(),
		"{{.SdkPackageName}}.{{.TypeName}}",
		"{{.MethodName}}",{{if .Args}}
		{{template "args_in_call" .}}{{end}}
	)
}

`, "\n")))
